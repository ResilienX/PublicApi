---
openapi: 3.0.1
info:
  title: USS API For Health And Integrity Monitoring
  description: 'These are proposed additions for adding robustness to the UTM ecosystem. The intent of this API is to incorporate internal health monitoring into UTM systems so that they can provide useful, actionable fault, status, system and version data to other services. This API does not imply guarantees about a service''s ability to repair and mitigate their own faults. It only standardizes a service''s ability to report them. This API will versioned according to SemVer 2.0 rules (as described here: https://semver.org/)'
  contact:
    email: g.dorchies@resilienx.com
  version: 0.0.2
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io

servers:
- url: https://<service>/<api>/v0

tags:
- name: System
  description: High level system and service information
- name: Fault
  description: Information about faults affecting the system and subsystems

paths:
  /system:
    get:
      tags:
      - System
      summary: Provides a snapshot of all of the current system properties
      description: This allows for the system to provide all of its high level properties, state and version information in one convenient package
      operationId: retrieveSystemInfo
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System'
        401:
          description: Not authenticated
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - AuthFromAuthorizationAuthority:
        - utm.read.system
        
  /system/{uuid}:
    get:
      tags:
      - System
      summary: Provides a snapshot of a specific system or subsystem represented by this server
      description: This allows for a client to request all of the properties of a specific system or subsystem represented by this server
      operationId: retrieveSystemInfoById
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
          description: Uuid of the target system
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System'
        401:
          description: Not authenticated
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - AuthFromAuthorizationAuthority:
        - utm.read.system

  /faults:
    get:
      tags:
      - Fault
      summary: Provides an aggregation of all faults affecting a system
      description: Provides an interface for retrieving fault information for both
        the full system and each of its reported subsystems
      operationId: retrieveFaults
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Fault'
        401:
          description: Not authenticated
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - this service will not provide fault information
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - AuthFromAuthorizationAuthority:
        - utm.read.faults
  
  /faults/{uuid}:
    get:
      tags:
      - Fault
      summary: Request a specific fault by ID value
      description: Provides an interface for retrieving fault information for a known UUID value
      operationId: retrieveFaultById
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fault'
        401:
          description: Not authenticated
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - this service will not provide fault information
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Not found - fault has been cleared or never existed
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - AuthFromAuthorizationAuthority:
        - utm.read.faults

components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: The error message provided back to the client
          
    System:
      type: object
      properties:
        uuid:
          $ref: '#/components/schemas/UUID'
        name:
          type: string
          description: The name of the system
        description:
          type: string
          description: Summary of services provided by this system
        state:
          $ref: '#/components/schemas/State'
        version:
          $ref: '#/components/schemas/Version'
        faults:
          description: All of the faults currently affecting this system. Expected to be in line with any individual faults reported through the separate 'fault' endpoint
          type: array
          items:
            $ref: '#/components/schemas/Fault'
        location:
          type: string
          description: General description of where the system or component actually is (to differentiate it from other, redundant systems)
        manufacturer:
          type: string
          description: Company or entity providing the service or system
        model:
          type: string
          description: The exact model string or number that describes this system
        startupTime:
          type: string
          format: date-time
          description: The time that this system last reached an operational state. If not provided, FRAIHMWORK will assume that the start time is last time it received a message with state = OPERATIONAL from this system. Follows format as specified by RFC 3339 section 5.6, which is a specific implementation of ISO 8601
        subsystems:
          type: array
          items:
            $ref: '#/components/schemas/System'
        additionalProperties:
          type: array
          items:
            $ref: '#/components/schemas/ExtraProperty'
      required: 
        - uuid
        - name
        - state
    
    UUID:
      type: string
      description: An identifier for this system that is guaranteed to be unique across the entire UTM ecosystem
      format: uuid
      
    Version:
      type: object
      description: The version of the system For maximum flexibility, this is provided as string values to allow for different versioning schemes.
      properties:
        hardware:
          type: string
          description: The version of the system's hardware package, if applicable
        software:
          type: string
          description: The version of the system's software package, if applicable
        firmware:
          type: string
          description: The version of the system's firmware package, if applicable
        configuration:
          type: string
          description: The version of the system's configuration, if applicable

    State:
      type: object
      properties:
        state:
          type: string
          description: "
          This is a high level description of the system or subsystem state. 
          UNAVAILABLE describes a system that cannot provide its normal services, but not due to a fault with the system. This could be because the service cannot access its host system, the system is being restarted, or any other similar reason
          STARTING_UP is for services being powered on - services may not be available yet but they will be soon
          ONLINE describes a system with services provided
          FAULTED describes a system that has a significant fault that is degrading service quality and/or is not meeting its performance specifications. In general, if this system is reporting faults, this state should be used in conjunction with any HIGH (and, situationally, MEDIUM) level faults "
          enum:
          - UNAVAILABLE
          - STARTING_UP
          - ONLINE
          - FAULTED
        description:
          type: string
          description: An optional detailed description of the system state in order to provide
            more context. This field can be left blank if the enum fully describes
            the system state with no additional qualifications.
      required:
        - state
        
    Fault:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: Identifier for the fault, so that it can be looked up in the future. Ids are expected to be consistent for the same instance for a fault
        name:
          type: string
          description: A brief high level summary of the fault
        description:
          type: string
          description: A more detailed description of the fault with as much relevant information as possible. Implementors are encouraged to define a standard format for fault descriptions that works for their service
        source:
          type: string
          format: uuid
          description: The source UUID of the component that is causing the fault. Used when the server can detect failures with other systems or subsystems. When not included, it is assumed that the source is the UUID of this server
        code:
          type: integer
          description: An integer representation of the fault code. This must be a value that always corresponds to a specific type of fault given a specific version of the system. Implementers are encouraged but not required to give meaningful numbers to faults - for example, faults relating to firmware issues may all fall in the range of 500-599.
        severity:
          type: string
          description: |
            This is a high level description of a fault affecting the service or system
            LOW is meant for faults that have no effect on the system. These are minor oddities that the software keeps track of but do not affect service quality in any way.
            MEDIUM level faults are meant for faults that affect the system's operational performance but do not affect the quality of information provided by a service. If a service is providing trustworthy information at a suboptimal rate, or if only non-critical functions are impeded, then a service is experiencing a MEDIUM level fault
            HIGH level faults affect service quality in some way because of a malfunction of the underlying software or hardware. These faults may resolve themselves over time, but should be associated with a FAULTED state. Services experiencing a HIGH level fault are operating below their performance specifications and are likely putting out bad data that cannot be trusted
            UNKNOWN is a level reserved for when the system cannot determine the source of a fault. This should not be used generally, as other services should treat UNKNOWN faults with the same level of caution as HIGH level faults
          enum:
          - LOW
          - MEDIUM
          - HIGH
          - UNKNOWN  
        timeOfDetection:
          type: string
          format: date-time
          description: The timestamp when this fault was first detected, as specified by RFC 3339 section 5.6
        timeOfValidity:
          type: string
          format: date-time
          description: The last timestamp when this fault was confirmed to still be active. Timestamp format is as specified by RFC 3339 section 5.6. If this field is not provided, it is assumed that the time of response for this message is the time of validity (and will try to match to any existing faults being tracked)
      required:
        - name
        - code
        - severity
        - timeOfDetection

    ExtraProperty:
      type: object
      properties:
        name:
          type: string
          description: Name of property
        value:
          type: string
          description: String interpretation of the value of the property
        type:         
          type: string
          description: Optional hint on how to interpret this property field
          enum:
            - INTEGER
            - FLOAT
            - STRING
            - DATE_TIME
            - BOOLEAN
            - RAW
      required: 
        - name
        - value

  securitySchemes:
    AuthFromAuthorizationAuthority:      
      flows:
        clientCredentials:
          tokenUrl: https://well-known/oauth-authorization-server
          scopes:
            utm.read.system: Client may query for any system, version or state data that the service can provide
            utm.read.faults: Client may query for any detailed fault information that the service can provide
      type: oauth2
      description: |-
        Authorization from, or on behalf of, an authorization authority.  This authority shall issue access tokens that are JSON Web Tokens as defined in RFC 7519, using the `RS256` algorithm for the signature, and publish to all providers the public key for verifying that signature.
  
        The following fields shall be included in the JWT claim for access tokens issued by this authority:
        * `iss`, with the URL at which the token generation request was received.
        * `aud`, with audience requested by client.
        * `exp`, with a time no further than 1 hour in the future.
        * `client_id`, with unique ID of the client requesting the access token.
        * `scope`, with an array of strings indicating the scopes granted.
  
        Multiple scopes for a single token shall be granted if requested.
  
        Clients shall provide these access tokens in an `Authorization` header in the form `Bearer <token>` in accordance with RFC 6750.
security:
- AuthFromAuthorizationAuthority:
  - utm.read.system
  - utm.read.faults